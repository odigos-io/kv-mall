apiVersion: apps/v1
kind: Deployment
metadata:
  name: analytics
  labels:
    app: analytics
spec:
  selector:
    matchLabels:
      app: analytics
  template:
    metadata:
      labels:
        app: analytics
    spec:
      containers:
      - name: analytics
        image: registry.odigos.io/kv-mall-analytics:v0.6
        env:
        - name: KAFKA_ADDRESS
          value: kafka-service.kv-mall-infra:9092
        - name: MEMCACHED_ADDR
          value: memcached.kv-mall-infra:11211
        - name: CASSANDRA_ADDR
          value: cassandra.kv-mall-infra:9042
        - name: POSTGRESQL_ADDR
          value: postgresql://postgres:postgres@postgres.kv-mall-infra:5432/postgres?sslmode=disable
        startupProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 100
        ports:
          - name: http
            containerPort: 8081
            protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coupon
  labels:
    app: coupon
spec:
  selector:
    matchLabels:
      app: coupon
  template:
    metadata:
      labels:
        app: coupon
    spec:
      containers:
      - name: coupon
        image: registry.odigos.io/kv-mall-coupon:v0.4
        env:
        - name: MEMBERSHIP_SERVICE_URL
          value: "membership:8080"
        - name: KAFKA_ADDRESS
          value: "kafka-service.kv-mall-infra:9092"
        ports:
        - containerPort: 8080
---
kind: Service
apiVersion: v1
metadata:
  name: coupon
spec:
  selector:
    app: coupon
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mail
  labels:
    app: mail
spec:
  selector:
    matchLabels:
      app: mail
  template:
    metadata:
      labels:
        app: mail
    spec:
      containers:
      - name: mail
        image: registry.odigos.io/kv-mall-mail:v0.3
        env:
        - name: KAFKA_ADDRESS
          value: "kafka-service.kv-mall-infra:9092"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: registry.odigos.io/kv-mall-frontend:v0.3
        env:
        - name: INVENTORY_SERVICE_HOST
          value: inventory:8080
        - name: PRICING_SERVICE_HOST
          value: pricing:8080
        - name: COUPON_SERVICE_HOST
          value: coupon:8080
        - name: ADS_SERVICE_HOST
          value: ads:8080
        ports:
        - containerPort: 8080
---
kind: Service
apiVersion: v1
metadata:
  name: frontend
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inventory
  labels:
    app: inventory
spec:
  selector:
    matchLabels:
      app: inventory
  template:
    metadata:
      labels:
        app: inventory
    spec:
      containers:
      - name: inventory
        image: registry.odigos.io/kv-mall-inventory:v0.3
        ports:
        - containerPort: 8080
---
kind: Service
apiVersion: v1
metadata:
  name: inventory
spec:
  selector:
    app: inventory
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-generator
  labels:
    app: load-generator
spec:
  selector:
    matchLabels:
      app: load-generator
  template:
    metadata:
      labels:
        app: load-generator
    spec:
      containers:
      - name: load-generator
        image: registry.odigos.io/kv-mall-load-generator:v0.3
        env:
        - name: BUY_PRODUCT_INTERVAL
          value: "2s"
        - name: GET_PRODUCTS_INTERVAL
          value: "10s"
---
kind: Service
apiVersion: v1
metadata:
  name: load-generator
spec:
  selector:
    app: load-generator
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: membership
  labels:
    app: membership
spec:
  selector:
    matchLabels:
      app: membership
  template:
    metadata:
      labels:
        app: membership
    spec:
      containers:
      - name: membership
        image: registry.odigos.io/kv-mall-membership:v0.4
        env:
        - name: KAFKA_ADDRESS
          value: kafka-service.kv-mall-infra:9092
        ports:
        - containerPort: 8080
---
kind: Service
apiVersion: v1
metadata:
  name: membership
spec:
  selector:
    app: membership
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pricing
  labels:
    app: pricing
spec:
  selector:
    matchLabels:
      app: pricing
  template:
    metadata:
      labels:
        app: pricing
    spec:
      containers:
      - name: pricing
        image: registry.odigos.io/kv-mall-pricing:v0.3
        ports:
        - containerPort: 8080
---
kind: Service
apiVersion: v1
metadata:
  name: pricing
spec:
  selector:
    app: pricing
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: warehouse
  labels:
    app: warehouse
spec:
  selector:
    matchLabels:
      app: warehouse
  template:
    metadata:
      labels:
        app: warehouse
    spec:
      containers:
      - name: warehouse
        image: registry.odigos.io/kv-mall-warehouse:v0.3
        ports:
        - containerPort: 8080
---
kind: Service
apiVersion: v1
metadata:
  name: warehouse
spec:
  selector:
    app: warehouse
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---

# Infrastructure

apiVersion: v1
kind: Namespace
metadata:
  name: kv-mall-infra
---


apiVersion: apps/v1
kind: Deployment
metadata:
  name: cassandra
  namespace: kv-mall-infra
spec:
  selector:
    matchLabels:
      app: cassandra
  replicas: 1
  template:
    metadata:
      labels:
        app: cassandra
    spec:
      containers:
      - name: cassandra
        image: cassandra:4.0
        ports:
        - containerPort: 9042
        env:
        - name: CASSANDRA_CLUSTER_NAME
          value: "kvmall"
---
apiVersion: v1
kind: Service
metadata:
  name: cassandra
  namespace: kv-mall-infra
spec:
    selector:
        app: cassandra
    ports:
    - protocol: TCP
      port: 9042
      targetPort: 9042

---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: kafka
  name: kafka
  namespace: kv-mall-infra
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: kafka
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml
        kompose.version: 1.28.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/tmp-default: "true"
        io.kompose.service: kafka
    spec:
      containers:
        - env:
            - name: KAFKA_CFG_PROCESS_ROLES
              value: controller,broker
            - name: KAFKA_CFG_NODE_ID
              value: "0"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: PLAINTEXT://kafka-service.kv-mall-infra:9092
            - name: KAFKA_CFG_LISTENERS
              value: PLAINTEXT://:9092,CONTROLLER://:9093
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
            - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
              value: 0@127.0.0.1:9093
            - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
              value: CONTROLLER
            - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
          image: bitnami/kafka:latest
          name: kafka
          ports:
            - containerPort: 9092
            - containerPort: 9093
          resources: {}
      restartPolicy: Always
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: kafka
  name: kafka-service
  namespace: kv-mall-infra
spec:
  ports:
    - name: "9092"
      port: 9092
      targetPort: 9092
    - name: "9093"
      port: 9093
      targetPort: 9093
  selector:
    io.kompose.service: kafka

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: memcached
  namespace: kv-mall-infra
spec:
  selector:
    matchLabels:
      app: memcached
  replicas: 1
  template:
    metadata:
      labels:
        app: memcached
    spec:
      containers:
      - name: memcached
        image: memcached:1.6.22-alpine
        ports:
        - containerPort: 11211
---
apiVersion: v1
kind: Service
metadata:
  name: memcached
  namespace: kv-mall-infra
spec:
  selector:
    app: memcached
  ports:
  - port: 11211
    targetPort: 11211

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: kv-mall-infra
  labels:
    app: postgres
spec:
    selector:
      matchLabels:
        app: postgres
    template:
      metadata:
        labels:
          app: postgres
      spec:
        containers:
        - name: postgres
          image: postgres:latest
          env:
          - name: POSTGRES_USER
            value: postgres
          - name: POSTGRES_PASSWORD
            value: postgres
          - name: POSTGRES_DB
            value: postgres
          ports:
          - containerPort: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: kv-mall-infra
spec:
    selector:
        app: postgres
    ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: kv-mall-infra
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: mysql
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: rootpassword
            - name: MYSQL_DATABASE
              value: adsdb
            - name: MYSQL_USER
              value: adsuser
            - name: MYSQL_PASSWORD
              value: adspass
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-initdb
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: mysql-initdb
          configMap:
            name: mysql-initdb-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
  namespace: kv-mall-infra
data:
  init-db.sql: |
    CREATE DATABASE IF NOT EXISTS adsdb;
    USE adsdb;
    CREATE TABLE IF NOT EXISTS ads (
        id INT AUTO_INCREMENT PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        description TEXT,
        price FLOAT NOT NULL,
        posted_date DATE NOT NULL
    );
    INSERT INTO ads (title, description, price, posted_date) VALUES
    ('Vintage Bicycle', 'A perfect condition vintage bicycle.', 150.00, '2023-01-01'),
    ('Coffee Table', 'Modern coffee table in great condition.', 75.00, '2023-02-15'),
    ('Gaming Console', 'Latest model, like new. Comes with two controllers.', 200.00, '2023-03-10'),
    ('Leather Jacket', 'Genuine leather, barely worn.', 100.00, '2023-04-05');
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: kv-mall-infra
spec:
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
  selector:
    app: mysql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ads
  labels:
    app: ads
spec:
  selector:
    matchLabels:
      app: ads
  template:
    metadata:
      labels:
        app: ads
    spec:
      containers:
        - name: ads
          image: registry.odigos.io/kv-mall-ads:v0.3
          ports:
            - containerPort: 8080
          securityContext:
            runAsUser: 1000
          env:
          - name: OTEL_PYTHON_DISABLED_INSTRUMENTATIONS
            value: sqlalchemy,pymysql
---
kind: Service
apiVersion: v1
metadata:
  name: ads
spec:
  selector:
    app: ads
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
